workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

include:
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - project: "usinelogicielle/public/gitlab-ci-templates"
    ref: v1.1.0
    file: "jobs/sonarqube-gitlab-ci.yml"

stages:
    - init
    - quality
    - test
    - sonarqube
    - package
    - deploy
    - doc
    - scan Xray

# Default configuration for all jobs
default:
        tags:
            - Usine_Logicielle
        timeout: 30 minutes

variables:
    SONARQUBE_TOKEN: "${VINCENTA_SONAR_TOKEN}" #Variable du template sonarqube
    DEBUG:
        value: 'false'
        description: "Afficher des logs supplÃ©mentaires"
    TAG_IMAGE_PYTHON: "python:3.8.19"
    TAG_IMAGE_SONAR: "sonarsource/sonar-scanner-cli:4.5"
    CI: "true"
    JFROG_CLI_HOME_DIR: ".jfrog"
    JFROG_VERSION: "v2/2.14.0"
    JFROG_OS: "jfrog-cli-linux-amd64"
    JFROG_CLI_BUILD_NAME: "${CI_PROJECT_PATH}_${CI_COMMIT_REF_SLUG}_gitlab-ci"
    JFROG_CLI_BUILD_NUMBER: "${CI_PIPELINE_ID}"
    ARTIFACTORY_URL: "${ARTIFACTORY_HOST}/docker"
    CI_TEMPLATE_REGISTRY_HOST: "${ARTIFACTORY_HOST}/gitlab-docker-remote"
    PIP_INDEX_URL : "https://${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN}@${ARTIFACTORY_HOST}/artifactory/api/pypi/pypi/simple"
    PIP_CERT: "${CNES_CERTIFICATE}"
    PIP_CACHE_DIR: "${WORKSPACE}/.pip-cache/"
    #SONAR_PROJECT_KEY: "eoscale"
    #SONAR_PROJECT_NAME: "eoscale"

python:
    stage: init
    image: ${ARTIFACTORY_URL}/${TAG_IMAGE_PYTHON}
    only:
        - merge_requests
    before_script:
        - curl -sS --cacert ${CNES_CERTIFICATE} -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O "https://${ARTIFACTORY_HOST}/artifactory/jfrog-cli-go-remote/${JFROG_VERSION}/${JFROG_OS}/jfrog"
        - chmod 755 jfrog
        - export UUID=$(cat /proc/sys/kernel/random/uuid)
        - touch uuid.txt
        - echo ${UUID} > uuid.txt
        - mkdir -p "${JFROG_CLI_HOME_DIR}/security/certs/"
        - cp ${CNES_CERTIFICATE} "${JFROG_CLI_HOME_DIR}/security/certs/"
    script:
        - pip install virtualenv
        - virtualenv python_env
        - source python_env/bin/activate
        - pip install pylint pytest pytest-cov build
        - ./jfrog config add ${UUID} --artifactory-url=https://${ARTIFACTORY_HOST}/artifactory  --access-token=${ARTIFACTORY_TOKEN}
        - ./jfrog pip-config --server-id-resolve=${UUID} --repo-resolve=pypi
        - ./jfrog rt pip-install -r requirements.txt --no-cache-dir --force-reinstall
        - pip install .
        - deactivate
    timeout: 15 minutes
    artifacts:
        untracked: true
        expire_in: 1 day


pytest:
    stage: quality
    image: ${ARTIFACTORY_URL}/${TAG_IMAGE_PYTHON}
    only:
        - merge_requests
    needs:
        - python
    script:
        - source python_env/bin/activate
        - pytest --cov=eoscale --cov-report=xml:.coverage-reports/coverage.xml # --cov-report=term
        - deactivate
    artifacts:
        expire_in: 1 day
        reports:
            coverage_report:
              coverage_format: cobertura
              path: ./.coverage-reports/coverage.xml
        paths:
          - ./.coverage-reports/coverage.xml


pylint_analysis:
    stage: quality
    image: ${ARTIFACTORY_URL}/${TAG_IMAGE_PYTHON}
    only:
        - merge_requests
    needs:
        - python
    script:
        - source python_env/bin/activate
        # --rcfile=pylintrc_RNC2015_D
        #  --halt-on-invalid-sonar-rules n
        - pylint eoscale --recursive=y  --exit-zero --output-format=json:pylint_report.json
        - cat pylint_report.json
    artifacts:
        paths:
          - ./pylint_report.json
        expire_in: 1 day

build-doc:
  stage: doc
  image: ${ARTIFACTORY_URL}/${TAG_IMAGE_PYTHON}
  only:
    - merge_requests
    - master
  needs:
    - python
  before_script:
    - cat ${CNES_CERTIFICATE} > /usr/local/share/ca-certificates/my-cert.crt
    - update-ca-certificates
    - pip install --upgrade pip
    - pip install sphinx sphinx-autodoc-typehints sphinx-rtd-theme myst-nb myst-parser
  script:
    - source python_env/bin/activate
    - sphinx-build ./docs/source ./docs/build
  artifacts:
    paths:
      - docs/build
    expire_in: 1 day

pages:
  stage: doc
  image: ${ARTIFACTORY_URL}/${TAG_IMAGE_PYTHON}
  needs:
    - build-doc
  dependencies:
    - build-doc
  script:
    - mkdir public
    - cp -r docs/build/* public/
  artifacts:
    paths: [public]
    expire_in: 1h
